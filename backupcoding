<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>FPS Camera with Instant Restart</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
    </style>
</head>
<body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.min.js"></script>
<script>
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x87CEEB);

    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    const platformGeometry = new THREE.BoxGeometry(100, 3, 100);
    const platformMaterial = new THREE.MeshBasicMaterial({ color: 0x008000 });
    const platform = new THREE.Mesh(platformGeometry, platformMaterial);
    platform.position.y = -1.5;
    scene.add(platform);

    const platformBounds = {
        xMin: -50,
        xMax: 50,
        zMin: -50,
        zMax: 50
    };

    const cameraHolder = new THREE.Object3D();
    cameraHolder.add(camera);
    scene.add(cameraHolder);

    const startingPosition = { x: 0, y: 1.5, z: 0 }; // Define starting position
    cameraHolder.position.set(startingPosition.x, startingPosition.y, startingPosition.z);

    const gravity = 0.015;
    const flySpeed = 0.5;
    let moveForward = false, moveBackward = false, moveLeft = false, moveRight = false;
    let isFlying = false, isJumping = false, isFalling = false;
    let jumpVelocity = 0, yaw = 0, pitch = 0;

    document.addEventListener('keydown', (event) => {
        switch (event.code) {
            case 'KeyW': moveForward = true; break;
            case 'KeyS': moveBackward = true; break;
            case 'KeyA': moveLeft = true; break;
            case 'KeyD': moveRight = true; break;
            case 'Space':
                if (isFlying) {
                    cameraHolder.position.y += flySpeed;
                } else if (!isJumping && !isFalling) {
                    isJumping = true;
                    jumpVelocity = 0.5;
                }
                break;
            case 'KeyF': isFlying = !isFlying; break; // Toggle flying mode
        }
    });

    document.addEventListener('keyup', (event) => {
        switch (event.code) {
            case 'KeyW': moveForward = false; break;
            case 'KeyS': moveBackward = false; break;
            case 'KeyA': moveLeft = false; break;
            case 'KeyD': moveRight = false; break;
        }
    });

    document.addEventListener('mousemove', (event) => {
        yaw -= event.movementX * 0.002;
        pitch -= event.movementY * 0.002;
        pitch = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, pitch));
        cameraHolder.rotation.y = yaw;
        camera.rotation.x = pitch;
    });

    document.body.addEventListener('click', () => {
        document.body.requestPointerLock();
    });

    function animate() {
        requestAnimationFrame(animate);

        if (!isFlying) {
            // Apply gravity and handle jumping/falling
            if (isJumping || isFalling) {
                cameraHolder.position.y += jumpVelocity;
                jumpVelocity -= gravity;
            }

            // Check if on the platform
            if (
                cameraHolder.position.x >= platformBounds.xMin &&
                cameraHolder.position.x <= platformBounds.xMax &&
                cameraHolder.position.z >= platformBounds.zMin &&
                cameraHolder.position.z <= platformBounds.zMax &&
                cameraHolder.position.y <= 1.5
            ) {
                cameraHolder.position.y = 1.5;
                isFalling = false;
                isJumping = false;
            } else if (cameraHolder.position.y > 1.5) {
                isFalling = true;
            }
        }

        // Movement logic
        const speed = isFlying ? flySpeed : 0.1;
        if (moveForward) {
            cameraHolder.position.x -= Math.sin(yaw) * speed;
            cameraHolder.position.z -= Math.cos(yaw) * speed;
            if (isFlying) cameraHolder.position.y += Math.sin(pitch) * flySpeed;
        }
        if (moveBackward) {
            cameraHolder.position.x += Math.sin(yaw) * speed;
            cameraHolder.position.z += Math.cos(yaw) * speed;
            if (isFlying) cameraHolder.position.y -= Math.sin(pitch) * flySpeed;
        }
        if (moveLeft) {
            cameraHolder.position.x -= Math.cos(yaw) * speed;
            cameraHolder.position.z += Math.sin(yaw) * speed;
        }
        if (moveRight) {
            cameraHolder.position.x += Math.cos(yaw) * speed;
            cameraHolder.position.z -= Math.sin(yaw) * speed;
        }

        // Instant restart logic
        if (cameraHolder.position.y < -50) { // Increased void distance
            cameraHolder.position.set(startingPosition.x, startingPosition.y, startingPosition.z);
            isFalling = false;
            isJumping = false;
            yaw = 0;
            pitch = 0;
            cameraHolder.rotation.set(0, 0, 0);
        }

        renderer.render(scene, camera);
    }

    animate();
</script>
</body>
</html>